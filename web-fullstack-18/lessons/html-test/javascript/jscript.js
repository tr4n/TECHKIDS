var array = [4245, -9114, 7666, -1346, -6683, 6294, -1483, -3844, -7869, -2622, -7148, 3075, -2, 2051, 2936, 564, 8031, 9534, 2924, 4194, 5186, -2875, -3081, 974, 2236, -2971, 1659, -852, -5925, 3244, 2213, -6557, 4949, 4735, 9778, -7888, 423, 2396, -3067, 3229, 1271, 4074, 2714, -6991, 1415, 4161, -2785, -4001, -5385, 1657, -7318, 3717, 7054, 6281, 3038, -1134, -6759, -6638, 3251, 6748, 9052, -6064, -9657, 4906, 5856, 7313, -5734, -2121, -8920, 4184, 8451, -9417, 6181, 4929, -590, -7575, -6360, -2875, -5172, 7746, -1457, 1484, -7155, 2870, -1245, 1687, -8342, 2359, 2935, -3171, -7554, -5782, 5326, 7383, -3110, 868, 2309, -2086, 459, 9797, -6986, -3889, -5772, -2373, -6908, -5766, 6247, 8735, -8771, -1185, -6778, -2458, -4007, -6617, 3007, 1146, 7072, 7258, -8383, 6680, 1720, 6073, -3614, -9646, 6048, -3521, -9959, 6495, -1102, 5717, -8926, 5534, 5981, -7901, 9209, -1101, -2030, 2948, 6919, 5785, -4526, -1075, 6694, -5515, 3928, 951, 5497, 2614, -5691, 5227, -7161, 9774, -3519, -861, -1237, 7943, -2708, 1357, -6938, 3018, -4988, 8635, 2561, -6742, -323, -2170, 4136, -9073, -6390, -5762, 5323, -6567, 9258, -5824, 8045, 867, 3564, 9055, -5788, -6944, 4922, -1812, 4902, 4405, 1717, 8714, 1735, 9833, -190, 1471, 8048, -4016, 8953, -3176, -1836, 8750, -1802, -980, 9904, 7161, -6862, 5616, 5918, -4674, -5392, 3834, -1586, -9904, 3126, -8995, 1013, -9423, 366, -3428, -6873, 8044, -1103, -9296, 9384, 8667, 3736, -3750, 2213, 8243, 3881, -3316, -5653, 4777, -9816, -4580, 9512, 1661, 67, 6150, 4705, -8976, 909, 6460, -6896, 6006, -4549, 2360, -5911, -849, -6568, -8281, -4169, 4053, 9091, -7208, -6890, 8108, 7663, 6273, -2443, 6423, -5397, 139, -1673, -569, -2778, 3120, 5796, 3804, -9698, -3410, 5957, 2350, 867, 166, 1538, -4689, -7397, 4758, -8659, 1059, -939, 5031, -9021, 6298, 6319, -7506, 2853, 3756, -935, 4592, -3682, 3453, -8779, 8642, 4674, 3391, 5789, -7152, 9090, -8454, -7060, -9370, -5038, -1538, 1684, -277, -2343, -7515, -4320, 6860, 9197, -1904, -9256, -5690, 2892, -869, -4616, -1255, 2763, -5561, 5708, 8120, -3324, 2502, 7342, -4903, -3411, 1278, 7646, -4154, -1191, 9959, 8685, -8595, 28, 6541, 9693, 2810, -1850, -8125, 4570, 3723, -835, 6723, -4928, 4656, 6937, 9777, -472, -9897, -1726, -3052, 2180, -288, -1086, 5435, -2942, -4207, -641, 9251, 7411, -8031, -7948, 226, 5285, 2897, -5790, 1628, 6679, -8197, -3615, 7031, 6788, -2636, 9599, 9920, -1186, 5307, 3901, 8601, -434, 4421, -8365, -4537, 2268, 6422, -8703, -9178, 7993, 1280, 8730, -6634, 4092, -8206, 677, -764, -2260, 3217, 9253, 1777, 9780, -9518, 295, 8034, 2660, -9630, -5335, -8420, -722, 6386, -3361, -8655, 9791, 9254, -5792, -1734, -2968, 4704, -1966, -7035, 1518, -4403, -6742, 9579, -5289, 399, -5613, -401, 7186, 6407];

function binarySearch(sortedArray, first, second, value) {
    var left = first,
        right = second;
    while (left <= right) {
        var mid = (left + right) >> 1;
        if (sortedArray[mid] == value)
            return mid;
        if (value < sortedArray[mid])
            right = mid - 1;
        else
            left = mid + 1;

    }
    return -1;

}



function quickSort(array, first, second) {
    var left = first,
        right = second,
        mid = parseInt((first + second) / 2);
    while (left <= right) {
        while (array[left] < array[mid]) left++;
        while (array[right] > array[mid]) right--;

        if (left <= right) {
            if (left < right) {
                var temp = array[left];
                array[left] = array[right];
                array[right] = temp;

            }
            left++;
            right--;
        }

    }

    if (first < right) quickSort(array, first, right);
    if (left < second) quickSort(array, left, second);
}

var test = [2313, 345345, 232, -234, -332, -333];

quickSort(array, 0, array.length - 1);
quickSort(array, 0, array.length - 1);
console.log(array);